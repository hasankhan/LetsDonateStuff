@using System.Web.Mvc.Html
@using LetsDonateStuff.Helpers

@helper AddMarker(float latitude, float longitude, string title, string description, bool draggable = false)
{
    title = HttpUtility.JavaScriptStringEncode(title ?? "");
    description = HttpUtility.JavaScriptStringEncode(description ?? "");
    @:addMarker(@latitude, @longitude, '@title', '@description', @draggable.ToString().ToLower());
}

@helper ImageLink(System.Web.Mvc.WebViewPage page, dynamic item)
{
    @(item.ImageUrlSmall ?? page.Url.Content("~/Content/Images/NoImage.png"))
}

@helper ShowImage(System.Web.Mvc.WebViewPage page, dynamic item)
    {
        <a 
        @if (item.ImageUrlSmall != null)
        {
            @:href="@item.ImageUrlOriginal" target="_blank" class="thickbox"
        }
        else
        {
            @:href="javascript:void(0)"
        }    
        >        
          <img alt="@item.Title" src="@ImageLink(page, item)" width="90" height="90" />    
        </a>
    }
}

@helper MarkDownEditor(System.Web.Mvc.WebViewPage page, string name)
    {
    <div class="mdd_toolbar"></div>
    @page.Html.TextArea(name, new { @class = "mdd_editor" })
    <div class="mdd_resizer"></div>
    <div class="mdd_preview"></div>
    @page.Html.ValidationMessage(name)
}

@helper SelectIfControllerAndAction(System.Web.Mvc.WebViewPage page, string controllerName, string actionName)
    {
    string normalizedControllerName = controllerName.EndsWith("Controller") ? controllerName : String.Format("{0}Controller", controllerName);

    if (page.ViewContext != null &&
        !String.IsNullOrEmpty(actionName) &&
        page.ViewContext.Controller.GetType().Name.Equals(normalizedControllerName, StringComparison.InvariantCultureIgnoreCase) &&
        page.ViewContext.Controller.ValueProvider.GetValue("action").AttemptedValue.Equals(actionName, StringComparison.InvariantCultureIgnoreCase))
    {
        @:class = "selected"
    }
}